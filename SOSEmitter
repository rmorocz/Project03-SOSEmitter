// 0. Documentation
//    Purpose:          To write a C program for a low power system that automatically signals 
//                      SOS so it can be used to alert passing airplanes and ships.   
//    Author:           Ricardo Morocz
//    Date:             07/16/2017
//    Notes:            - built-in connection: PF0 connected to negative logic momentary switch, SW2
//                      - built-in connection: PF1 connected to red LED
//                      - built-in connection: PF2 connected to blue LED
//                      - built-in connection: PF3 connected to green LED
//                      - built-in connection: PF4 connected to negative logic momentary switch, SW1
//                      - Color    LED(s) PortF
//                        dark     ---    0
//                        red      R--    0x02
//                        blue     --B    0x04
//                        green    -G-    0x08
//                        yellow   RG-    0x0A
//                        sky blue -GB    0x0C
//                        white    RGB    0x0E

//--------------------------------------------------------------------------------------------------------------------------
// 1. Pre-processor Directives
#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))
#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))
		
//--------------------------------------------------------------------------------------------------------------------------
// 2. Global Declarations

//    Global Variables
unsigned long PF3; //Green LED in PF2
unsigned long PF4; //SW1 in PF4
unsigned long PF0; //SW2 in PF0
unsigned char symbol[0];

//    Function Prototypes
void PortF_Init(void);
void DelayMs(unsigned long msec);
void EnableInterrupts(void);  // Enable interrupts
void MorseCodeToLED(unsigned char mc[], unsigned char size);
void WaitForSW1Low(void);


//--------------------------------------------------------------------------------------------------------------------------
// 3. Functions/Subroutines

int main(void){
  PortF_Init();                                   // Init port PF4 PF3 PF1    
  EnableInterrupts();                             // enable interrupts for the grader  
	unsigned char S[3] = {1,1,1};
	unsigned char O[3] = {2,2,2};
	
  while(1){          
		WaitForSW1Low();
		do{
		  PF4 = GPIO_PORTF_DATA_R&0x10;
			MorseCodeToLED(S,3);
			MorseCodeToLED(O,3);
			MorseCodeToLED(S,3);
			DelayMs(5000);
			PF0 = GPIO_PORTF_DATA_R&0x01;
	  } while (PF0 == 0x01);
  }
}

// PortF_Init: Subroutine to initialize port F pins for input and output
// PF4 is input SW1 and PF3-1 is output LEDs
// Inputs: None
// Outputs: None
// Notes: ...
void PortF_Init(void){ 
	volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;      // 1) F clock
  delay = SYSCTL_RCGC2_R;            // delay to allow clock to stabilize   
  GPIO_PORTF_LOCK_R = 0x4C4F434B;    // 2) unlock PortF PF0  
  GPIO_PORTF_CR_R |= 0x1F;           // allow changes to PF4-0     
  GPIO_PORTF_AMSEL_R &= 0x00;        // 2) disable analog function
  GPIO_PORTF_PCTL_R &= 0x00000000;   // 3) GPIO clear bit PCTL  
  GPIO_PORTF_DIR_R &= ~0x11;         // 4.1) PF4 and PF0 input
  GPIO_PORTF_DIR_R |= 0x08;          // 4.2) PF2 output
  GPIO_PORTF_AFSEL_R &= 0x00;        // 5) no alternate function
  GPIO_PORTF_PUR_R |= 0x11;          // 6) enable pullup resistor on PF0 and PF4       
  GPIO_PORTF_DEN_R |= 0x1F;          // 7) enable digital pins PF4-PF0
}

// DelayMs: Subroutine to delay in units of milliseconds
// Inputs:  Number of milliseconds to delay
// Outputs: None
// Notes:   assumes 80 MHz clock
void DelayMs(unsigned long msec){
	unsigned long i = msec * 80000 / 6; // 100ms * 80MHz / 6 cycles per loop = 1333333
	while(i > 0){
      i = i - 1;
  }
}

// MorseCodeToLED: Converts Morse Code to LED flashes
// Inputs:  Pulse types for specific symbols in array (Ex. Letter A is represented by a short pulse followed by a long pulse), and size of morse code representation of symbol
// Outputs: None
// Notes:   None
void MorseCodeToLED(unsigned char mc[], unsigned char size){
	for(char i = 0; i < size; i++){
		DelayMs(500);
		if (mc[i] == 1){                     // If the signal is short, turn ON for 500 ms then turn back OFF
			GPIO_PORTF_DATA_R |= 0x08;
			DelayMs(500);
			GPIO_PORTF_DATA_R &= ~0x08;
		}else if (mc[i] == 2) {              // If the signal is long, turn ON for 2000 ms then turn back OFF
			GPIO_PORTF_DATA_R |= 0x08;
			DelayMs(2000);
			GPIO_PORTF_DATA_R &= ~0x08;
		}
	}
}

// WaitForSW1Low: Subroutine reads AS input and waits for signal to be low
// If AS is already low, it returns right away
// If AS is currently high, it will wait until it to go low
// Inputs:  None
// Outputs: None
void WaitForSW1Low(void){
   do{
		 PF4=GPIO_PORTF_DATA_R&0x10;
	 } while (PF4 == 0x10);
}

